// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enums
enum Gender {
  Male   @map("male")
  Female @map("female")
  Others @map("others")

  @@map("genders")
}

// models
// 42000
model User {
  id        String    @id @default(cuid())
  username  String    @unique
  password  String
  salt      String
  email     String?
  prefix    String
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  doctor    Doctor?
  patient   Patient?
  admin     Admin?
  accounts  Account[]
  sessions  Session[]

  @@map("users")
}

// 42001
model Admin {
  userId String @id @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("admins")
}

// 42002
model Doctor {
  userId           String            @id @map("user_id")
  user             User              @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  probioticRecords ProbioticRecord[]

  @@map("doctors")
}

// 42003
model Patient {
  userId            String                    @id @map("user_id")
  ssn               String
  gender            Gender
  birthDate         DateTime                  @map("birth_date")
  ethnicity         String?
  user              User                      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  medicalConditions MedicalConditionPatient[]
  probioticRecords  ProbioticRecord[]

  @@map("patients")
}

// 42004
model File {
  id        String   @id @default(cuid())
  uri       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("files")
}

// 42005
model Probiotic {
  id        Int         @id @default(autoincrement())
  parentId  Int?        @map("parent_id")
  name      String
  red       Float
  yellow    Float
  green     Float
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  parent    Probiotic?  @relation("parent", fields: [parentId], references: [id], onUpdate: Cascade)
  children  Probiotic[] @relation("parent")

  @@map("probiotics")
}

// 42006
model ProbioticBrand {
  id               Int                             @id @default(autoincrement())
  name             String
  createdAt        DateTime                        @default(now()) @map("created_at")
  updatedAt        DateTime                        @updatedAt @map("updated_at")
  probioticRecords ProbioticBrandProbioticRecord[]

  @@map("probiotic_brands")
}

// 42007
model MedicalCondition {
  id        Int                       @id @default(autoincrement())
  name      String
  createdAt DateTime                  @default(now()) @map("created_at")
  updatedAt DateTime                  @updatedAt @map("updated_at")
  patients  MedicalConditionPatient[]

  @@map("medical_conditions")
}

// 42008
model ProbioticRecord {
  id              String                          @id @default(cuid())
  doctorId        String                          @map("doctor_id")
  patientId       String                          @map("patient_id")
  fileId          String?                         @map("file_id")
  result          Json
  createdAt       DateTime                        @default(now()) @map("created_at")
  updatedAt       DateTime                        @updatedAt @map("updated_at")
  doctor          Doctor                          @relation(fields: [doctorId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  patient         Patient                         @relation(fields: [patientId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  probioticBrands ProbioticBrandProbioticRecord[]

  @@map("probiotic_records")
}

// 42009
model ProbioticBrandProbioticRecord {
  id                Int             @id @default(autoincrement())
  probioticBrandId  Int             @map("probiotic_brand_id")
  probioticRecordId String          @map("probiotic_record_id")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  probioticBrand    ProbioticBrand  @relation(fields: [probioticBrandId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  probioticRecord   ProbioticRecord @relation(fields: [probioticRecordId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("probiotic_brand_probiotic_record")
}

// 42010
model MedicalConditionPatient {
  id                 Int              @id @default(autoincrement())
  medicalConditionId Int              @map("medical_condition_id")
  patientId          String           @map("patient_id")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  medicalCondition   MedicalCondition @relation(fields: [medicalConditionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  patient            Patient          @relation(fields: [patientId], references: [userId], onUpdate: Cascade, onDelete: Cascade)

  @@map("medical_condition_patient")
}

// NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verfication_tokens")
}
